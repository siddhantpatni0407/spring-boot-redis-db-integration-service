// Gradle build configuration for Spring Boot Redis Database Integration project.
// Includes plugins for static analysis, code style, and test coverage.

plugins {
    id 'java' // Java plugin for compiling Java code
    id 'org.springframework.boot' version '3.5.5' // Spring Boot plugin for building Spring Boot applications
    id 'io.spring.dependency-management' version '1.1.7' // Manages dependency versions for Spring projects
    id 'pmd' // PMD plugin for static code analysis
    id 'checkstyle' // Checkstyle plugin for code style checks
    id 'jacoco' // JaCoCo plugin for test coverage
}

group = 'com.sid' // Project group ID
version = '0.0.1-SNAPSHOT' // Project version
description = 'Spring Boot Redis Database Integration' // Project description

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21) // Sets Java language version to 21
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor // Ensures annotation processors are available at compile time
    }
}

repositories {
    mavenCentral() // Uses Maven Central repository for dependencies
}

dependencies {
    // Spring Boot and related dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.commons:commons-pool2'
    implementation group: 'org.slf4j', name: 'slf4j-ext'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    compileOnly 'org.projectlombok:lombok' // Lombok for reducing boilerplate code
    annotationProcessor 'org.projectlombok:lombok' // Lombok annotation processor
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // Spring Boot test starter
}

tasks.named('test') {
    useJUnitPlatform() // Configures tests to use JUnit Platform
}

pmd {
    toolVersion = '6.55.0' // PMD tool version
    ruleSets = ['category/java/bestpractices.xml', 'category/java/codestyle.xml']
    // PMD rule sets for best practices and code style
}

checkstyle {
    toolVersion = '10.12.1' // Checkstyle tool version
    configFile = rootProject.file('config/checkstyle/checkstyle.xml') // Path to Checkstyle configuration file
}

jacoco {
    toolVersion = "0.8.11" // JaCoCo tool version for code coverage
}

tasks.jacocoTestReport {
    reports {
        xml.required = true // Generates XML report for code coverage
        html.required = true // Generates HTML report for code coverage
    }
}